---

title: '02_flask_routes'

---

# Flask Routes

---

## Getting JSON from the request

- It all depends on the content type passed into the request

---

- `request.form`: key/value pairs in the HTML POST form that isn't JSON encoded
- `request.form['key']` if key definitely exists
- `request.form.get('key')` if key may not exist

---

- `request.values`: multipurpose for args and form, especially if they overlap

---

- ➡️ `request.get_json()`: parse json data ⬅️

---

- `request.args`: key value pairs in the URL query string
<img src='https://static.semrush.com/blog/uploads/media/00/6e/006eebc38b54220916caecfc80fed202/Guide-to-URL-Parameters-2.png' width="500px">

---

## Creating JSON responses

- `jsonify()`: adds header for JSON
- `make_response()`: allows you to add custom headers

<aside class="notes">
- `json.dumps()` does not automatically add an application/json header, and you need to provide how to serialize 
- `jsonify()` will add the header for you, and you need to provide how to serialize, you can return `jsonify()` immediately without `make_response`
- `to_dict()` is enabled by flask-serialize
- `make_response` allows you to add custom headers - mostly used for returning Flask views

best way to do it is with `make_response(jsonify())` or just `jsonify()`
</aside>


---

## SerializerMixin

Having to write this again and again is annoying:

```python
for production in query:
    prods_list.append({
        "title": production.title,
        "genre": production.genre,
        "length": production.length
    })
```

---

## SerializerMixin

- Luckily we have `SerializerMixin`.
- We use `SerializerMixin` to automatically turn instances of our models into dictionaries:

```python
prods_list = []
for production in query:
    prods_list.append(production.to_dict())
```

- or even shorter...

```python
prods_list = [production.to_dict() for production in query]
```

---

## SerializerMixin

- Allows you to write rules on what fields to include in your response
- Especially helpful when you need to make use of relationships

```python
from sqlalchemy_serializer import SerializerMixin
from app import db

class SomeModel(db.Model, SerializerMixin)
```

- An easy way to serialize JSON for GET from db and for PUT/POST/PATCH/etc. from client.



---


## Serializer Rules

`serialize_only()` will include ONLY the exact specified fields
`serialize_rules()` is the negative to `serialize_only()` (so don't forget the `-`)

---

## Serializer Rules

```python
only_result = item.to_dict(only=('field_one', 'field_two'))
rules_result = item.to_dict(rules=('-field_one', '-field_two'))
```

OR

```python
serialize_only = ('field_one', 'field_two')
serialize_rules = ('-field_one', '-field_two')
```

---

## Max Recursion

- When creating a many-to-many relationship we may reach a max-recursion depth 
- For example with Actor -< Role >- Films if we try to serialize Actor we may get
```python
{
    id: 1,
    name: 'Richard',
    films: [
        {
            id: 1,
            title: 'Where\'s Richard?',
            actors: [
                {
                    id: 1,
                    name: 'Richard',
                    films: [
                        {
                            //more films...and actors...and films...
                        }
                    ]
                }
            ]
        }
    ]
}

```

---

## Max Recursion

- To avoid this we have to specify where to stop by using `serialize_rules(-films.actors)`

```python
{
    id: 1,
    name: 'Richard',
    films: [
        {
            id: 1,
            title: 'Where\'s Richard?'
            //no more actors!
        }
    ]
}

```